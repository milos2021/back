<template>
  <div>
    <v-container fluid>
      <v-row align="center">
        <v-col class="d-flex" cols="12" sm="6">
          <v-select
            :items="months"
            item-value="id"
            item-text="title"
            v-model="monthDefault"
            label="Month"
            v-on:change="filterByMonth"
          ></v-select>
        </v-col>
      </v-row>
      <v-row align="center">
        <v-col class="d-flex" cols="12" sm="6">
          <v-select
            :items="years"
            item-value="id"
            item-text="title"
            v-model="yearDefault"
            label="Godina"
            v-on:change="filterByYear"
          ></v-select>
        </v-col>
      </v-row>
      <v-row align="center">
        <v-col class="d-flex" cols="12" sm="6">
          <v-select
            :items="channels"
            item-value="id"
            item-text="title"
            :disabled="isChannelDisabled"
            v-model="channelDefault"
            label="Channel"
            v-on:change="filterByChannel"
          ></v-select>
        </v-col>
      </v-row>
      <v-row align="center">
        <v-col class="d-flex" cols="12" sm="6">
          <v-select
            :items="slipTypes"
            item-value="id"
            item-text="title"
            v-model="slipTypeDefault"
            label="Slip Type"
            v-on:change="filterBySlipType"
          ></v-select>
        </v-col>
      </v-row>
      <v-row align="center">
        <v-col class="d-flex" cols="12" sm="6">
          <v-select
            :items="aspects"
            item-value="id"
            item-text="title"
            v-model="aspectDefault"
            label="Aspect"
            v-on:change="filterByAspect"
          ></v-select>
        </v-col>
        <v-col class="d-flex" cols="12" sm="6" v-if="filters.aspect == 0">
          <v-text-field
            v-model="ranges.from"
            @keyup.native="checkIfEligible"
            @change.native="checkIfEligible"
            min="20"
            type="number"
            class="from"
            label="("
          ></v-text-field>
          <v-text-field
            v-model="ranges.to"
            @keyup.native="checkIfEligible"
            @change.native="checkIfEligible"
            min="0"
            type="number"
            class="to"
            id="to"
            label="]"
          ></v-text-field>
          <!-- <v-alert type="error" v-if="error">
            Error
          </v-alert> -->
        </v-col>
      </v-row>
    </v-container>
    <v-container fluid>
      <v-row align="center">
        <v-col class="d-flex" cols="12" sm="6">
          <v-btn
            color="primary"
            elevation="2"
            :disabled="error"
            outlined
            plain
            raised
            v-on:click="
getData"
            >Search</v-btn
          >
          <export-excel
            class="btn btn-default"
            :data="json_data"
            type="csv"
            :name="todayDateFile"
          >
            <img
              src="@/assets/excel.png"
              style="margin-top:-1px; margin-left:3px; width:40px; cursor:pointer"
            />
          </export-excel>
        </v-col>
      </v-row>
    </v-container>
    <v-layout v-resize="onResize" column style="padding-top:56px">
      <v-data-table
        :headers="headers"
        :hide-default-header="!isMobile"
        :page.sync="page"
        :items-per-page="itemsPerPage"
        hide-default-footer
        :items="tickets"
        :class="{ mobile: isMobile }"
        item-key="name"
        :loading="loadTable"
        @page-count="pageCount = $event"
        no-data-text="Nema podataka"
        loading-text="Učitavanje podataka..."
      >
        <template v-if="!isMobile" v-slot:header="{ props }">
          <tr>
            <th></th>
            <th
              colspan="5"
              style="border-left:1px solid black; border-right:1px solid black"
            >
              Turnover
            </th>
            <th colspan="3" style="border-right:1px solid black">Winnings</th>
            <th colspan="2">GGR Margin</th>
          </tr>
          <tr>
            <th
              class="mainHeader"
              style="text-align:left; padding-left:15px; padding-top:10px"
              v-for="head in props.headers"
              :key="head.text"
            >
              {{ head.text.toUpperCase() }}
            </th>
          </tr>
          <tr>
            <th
              style="text-align:left; padding-left:15px; padding-bottom:5px; border-right:1px solid black; padding-top:5px; border-top:1px solid black; border-bottom:1px solid black"
            >
              Overall
            </th>
            <th
              style="text-align:left; padding-left:15px; border-right:1px solid black; padding-bottom:5px; padding-top:5px; border-top:1px solid black; border-bottom:1px solid black"
            >
              {{ overalls.bet }}
            </th>
            <th
              style="text-align:left; padding-left:15px; border-right:1px solid black; padding-bottom:5px; padding-top:5px; border-top:1px solid black; border-bottom:1px solid black"
            >
              {{ overalls.sumbet }}
            </th>
            <th
              colspan="3"
              style="text-align:left; padding-left:15px; border-right:1px solid black; padding-bottom:5px; padding-top:5px; border-top:1px solid black; border-bottom:1px solid black"
            ></th>
            <th
              style="text-align:left; padding-left:15px; border-right:1px solid black; padding-bottom:5px; padding-top:5px; border-top:1px solid black; border-bottom:1px solid black"
            >
              {{ overalls.win }}
            </th>
            <th
              style="text-align:left; padding-left:15px; border-right:1px solid black; padding-bottom:5px; padding-top:5px; border-top:1px solid black; border-bottom:1px solid black"
            ></th>
            <th
              style="text-align:left; padding-left:15px; border-right:1px solid black; padding-bottom:5px; padding-top:5px; border-top:1px solid black; border-bottom:1px solid black"
            >
              {{ overalls.sumwin }}
            </th>
            <th
              style="text-align:left; padding-left:15px; border-right:1px solid black; padding-bottom:5px; padding-top:5px; border-top:1px solid black; border-bottom:1px solid black"
            >
              {{ overalls.sumggr }}
            </th>
            <th
              style="text-align:left; padding-left:15px;  padding-bottom:5px; padding-top:5px; border-top:1px solid black; border-bottom:1px solid black"
            >
              {{ overalls.marginudeo }}
            </th>
          </tr>
        </template>
        <template v-slot:item="{ item }">
          <tr v-if="!isMobile">
            <td>{{ item.Opseg }}</td>
            <td class="text-xs-right">{{ item.Bet }}</td>
            <td class="text-xs-right">{{ item.SumBet }}</td>
            <td class="text-xs-right">{{ item.AvgBet }}</td>
            <td class="text-xs-right">{{ item.GwaOdds }}</td>
            <td class="text-xs-right">{{ item.GwaEvents }}</td>
            <td class="text-xs-right">{{ item.Win }}</td>
            <td class="text-xs-right">{{ item.CtrbBets }}</td>
            <td class="text-xs-right">{{ item.SumWin }}</td>
            <td class="text-xs-right">{{ item.ggr }}</td>
            <td class="text-xs-right">{{ item.margin }}</td>
          </tr>
          <tr v-else>
            <td
              style="border-top:thin solid rgba(0,0,0,0.12); border-bottom:none"
            >
              <ul class="flex-content">
                <li class="flex-item" data-label="STAKE">
                  {{ item.Opseg }}
                </li>
                <li class="flex-item" data-label="#BET">
                  {{ item.Bet }}
                </li>
                <li class="flex-item" data-label="ΣBET">
                  {{ item.SumBet }}
                </li>
                <li class="flex-item" data-label="AVG.BET">
                  {{ item.AvgBet }}
                </li>
                <li class="flex-item" data-label="GWA.ODDS">
                  {{ item.GwaOdds }}
                </li>
                <li class="flex-item" data-label="GWA.EVENTS">
                  {{ item.GwaEvents }}
                </li>
                <li class="flex-item" data-label="#WIN">
                  {{ item.Win }}
                </li>
                <li class="flex-item" data-label="CTRB.#BETS">
                  {{ item.CtrbBets }}
                </li>
                <li class="flex-item" data-label="ΣWIN">
                  {{ item.SumWin }}
                </li>
                <li class="flex-item" data-label="ΣGGR">
                  {{ item.ggr }}
                </li>
                <li class="flex-item" data-label="MARGIN">
                  {{ item.margin }}
                </li>
              </ul>
            </td>
          </tr>
        </template>
      </v-data-table>
    </v-layout>
    <div class="text-center pt-2">
      <v-pagination
        v-if="tickets.length > 32"
        v-model="page"
        :length="pageCount"
      ></v-pagination>
    </div>
  </div>
</template>

<script>
const axios = require("axios").default;
export default {
  name: "tiket",
  data() {
    return {
      error: false,
      ranges: {
        from: null,
        to: null,
      },
      todayDateFile: new Date().toISOString() + ".xls",
      json_fields: {},
      json_data: [],
      json_meta: [
        [
          {
            key: "charset",
            value: "utf-8",
          },
        ],
      ],
      pagination: {
        sortBy: "name",
      },
      responsiveTable: false,
      overalls: {
        win: null,
        sumwin: null,
        bet: null,
        sumbet: null,
        sumggr: null,
        marginudeo: null,
      },
      isMobile: false,
      page: 1,
      pageCount: 0,
      itemsPerPage: 32,
      isChannelDisabled: true,
      loadTable: true,
      monthDefault: 0,
      yearDefault: 2021,
      channelDefault: 1,
      slipTypeDefault: -1,
      aspectDefault: 0,
      channels: [
        {
          id: 0,
          title: "All",
        },
        {
          id: 1,
          title: "Online",
        },
        {
          id: 2,
          title: "Retail",
        },
      ],
      slipTypes: [
        {
          id: -1,
          title: "All",
        },
        {
          id: 0,
          title: "PreMatch",
        },
        {
          id: 1,
          title: "Live",
        },
        {
          id: 2,
          title: "Mixed",
        },
        {
          id: 3,
          title: "Outright",
        },
      ],
      aspects: [
        {
          id: 0,
          title: "Ranges",
        },
        {
          id: 1,
          title: "Num of Evts",
        },
        {
          id: 2,
          title: "Providers",
          disabled: true,
        },
        {
          id: 3,
          title: "Per day",
        },
        {
          id: 4,
          title: "Per year",
        },
      ],
      months: [
        {
          id: 0,
          title: "All",
          from: "-01-01T08:00:00",
          to: "-01-01T08:00:00",
        },
        {
          id: 1,
          from: "-01-01T08:00:00",
          to: "-02-01T08:00:00",
          title: "January",
        },
        {
          from: "-02-01T08:00:00",
          to: "-03-01T08:00:00",
          id: 2,
          title: "February",
        },
        {
          from: "-03-01T08:00:00",
          to: "-04-01T08:00:00",
          id: 3,
          title: "March",
        },
        {
          from: "-04-01T08:00:00",
          to: "-05-01T08:00:00",
          id: 4,
          title: "April",
        },
        {
          from: "-05-01T08:00:00",
          to: "-06-01T08:00:00",
          id: 5,
          title: "May",
        },
        {
          from: "-06-01T08:00:00",
          to: "-07-01T08:00:00",
          id: 6,
          title: "June",
        },
        {
          from: "-07-01T08:00:00",
          to: "-08-01T08:00:00",
          id: 7,
          title: "July",
        },
        {
          from: "-08-01T08:00:00",
          to: "-09-01T08:00:00",
          id: 8,
          title: "August",
        },
        {
          from: "-09-01T08:00:00",
          to: "-10-01T08:00:00",
          id: 9,
          title: "September",
        },
        {
          from: "-10-01T08:00:00",
          to: "-11-01T08:00:00",
          id: 10,
          title: "October",
        },
        {
          from: "-11-01T08:00:00",
          to: "-12-01T08:00:00",
          id: 11,
          title: "November",
        },
        {
          from: "-12-01T08:00:00",
          to: "-01-01T08:00:00",
          id: 12,
          title: "December",
        },
      ],
      years: [
        {
          id: 2021,
          title: "2021",
        },
        {
          id: 2020,
          title: "2020",
        },
        {
          id: 2019,
          title: "2019",
        },
        {
          id: 2018,
          title: "2018",
        },
      ],
      search: "",
      tiketi: [],
      filters: {
        month: 0,
        year: 2021,
        channel: 1,
        slipType: -1,
        aspect: 0,
      },
    };
  },
  methods: {
    onResize() {
      if (window.innerWidth < 769) this.isMobile = true;
      else this.isMobile = false;
    },
    filterByMonth(criteria) {
      this.filters.month = criteria;
    },
    filterByYear(criteria) {
      this.filters.year = criteria;
    },
    filterByChannel(criteria) {
      this.filters.channel = criteria;
    },
    filterBySlipType(criteria) {
      this.filters.slipType = criteria;
    },
    filterByAspect(criteria) {
      this.filters.aspect = criteria;
    },
    //Formatting json
    formatJson(filterVal, jsonData) {
      return jsonData.map((v) => filterVal.map((j) => v[j]));
    },
    getData() {
      if (this.checkIfEligible()) {
        this.loadTable = true;
        this.tickets = [];
        this.emptyObject(this.overalls);
        axios
          .post("http://localhost:5000", {
            rangeFrom: this.ranges.from,
            rangeTo: this.ranges.to,
            year: this.filters.year,
            monthFrom:
              this.years.filter((x) => x.id == this.filters.year)[0].id +
              this.months.filter((x) => x.id == this.filters.month)[0].from,
            monthTo:
              this.months.filter((x) => x.id == this.filters.month)[0].id ==
                12 ||
              this.months.filter((x) => x.id == this.filters.month)[0].id == 0
                ? this.years.filter((x) => x.id == this.filters.year)[0].id +
                  1 +
                  this.months.filter((x) => x.id == this.filters.month)[0].to
                : this.years.filter((x) => x.id == this.filters.year)[0].id +
                  this.months.filter((x) => x.id == this.filters.month)[0].to,
            channel: this.filters.channel,
            slipType: this.filters.slipType,
            aspect: this.filters.aspect,
          })
          .then((response) => {
            this.formatTicket(response);
            this.loadTable = false;
          });
      }
    },
    isNegative(val) {
      return val == null || val == "";
    },
    checkIfEligible() {
      if (this.filters.aspect != 0) {
        this.error = false;
        return true;
      }
      if (parseInt(this.ranges.from) >= parseInt(this.ranges.to) || parseInt(this.ranges.from) < 20) {
        this.error = true;
        return false;
      }
      if (
        this.isNegative(this.ranges.from) &&
        this.isNegative(this.ranges.to)
      ) {
        this.error = false;
        return true;
      }
      if (
        !this.isNegative(this.ranges.from) ||
        !this.isNegative(this.ranges.to)
      ) {
        if (
          !this.isNegative(this.ranges.from) &&
          this.isNegative(this.ranges.to)
        ) {
          this.error = true;
          return false;
        }
        if (
          this.isNegative(this.ranges.from) &&
          !this.isNegative(this.ranges.to)
        ) {
          this.error = true;
          return false;
        }
        this.error = false;
        return true;
      }
    },
    emptyObject(obj) {
      for (const [key] of Object.entries(obj)) {
        obj[key] = null;
      }
    },
    formatTicket(response) {
      if (Object.keys(response.data.tiket).length != 0) {
        this.tickets = response.data.tiket.filter(
          (x) => x.Opseg != "van opsega"
        );
        const formatter = new Intl.NumberFormat("en-US", {
          style: "currency",
          currency: "USD",
          minimumFractionDigits: 2,
        });
        this.tickets.forEach((ticket) => {
          let sumBet = this.convertToCleanFloat(ticket["SumBet"]);
          let sumWin = this.convertToCleanFloat(ticket["SumWin"]);

          ticket["Bet"] = ticket["Bet"].replace("$", "");
          ticket["SumBet"] = ticket["SumBet"].replace("$", "");
          ticket["AvgBet"] = ticket["AvgBet"].replace("$", "");
          ticket["GwaOdds"] = ticket["GwaOdds"].replace("$", "");
          ticket["GwaEvents"] = ticket["GwaEvents"].replace("$", "");
          ticket["Win"] = ticket["Win"].replace("$", "");
          ticket["CtrbBets"] = ticket["CtrbBets"].replace("$", "");
          ticket["SumWin"] = ticket["SumWin"].replace("$", "");
          ticket["ggr"] = formatter
            .format(parseFloat(sumBet) - parseFloat(sumWin))
            .replace("$", "");
          ticket["margin"] =
            this.toFixed(
              (parseFloat(ticket["ggr"].replace(/,/g, "")) /
                parseFloat(sumBet)) *
                100,
              2
            ) + "%";
        });
        this.createOveralls();
        this.mapStakes();
      } else {
        this.tickets = [];
      }
      this.json_data = this.tickets;
    },
    convertToCleanFloat(num) {
      return num.replace("$", "").replace(/,/g, "");
    },
    createOveralls() {
      //c - stands for cumulative
      const formatter = new Intl.NumberFormat("en-US", {
        style: "currency",
        currency: "USD",
        minimumFractionDigits: 2,
      });
      let cWin = this.tickets.reduce(
        (a, b) => a + parseFloat(this.convertToCleanFloat(b["Win"])),
        0
      );
      let cBet = this.tickets.reduce(
        (a, b) => a + parseFloat(this.convertToCleanFloat(b["Bet"])),
        0
      );
      let cSumWin = this.tickets.reduce(
        (a, b) => a + parseFloat(this.convertToCleanFloat(b["SumWin"])),
        0
      );
      let cSumBet = this.tickets.reduce(
        (a, b) => a + parseFloat(this.convertToCleanFloat(b["SumBet"])),
        0
      );
      let cSumGgr = this.tickets.reduce(
        (a, b) => a + parseFloat(this.convertToCleanFloat(b["ggr"])),
        0
      );
      this.overalls.win = formatter
        .format(this.toFixed(cWin, 2))
        .replace("$", "");
      this.overalls.bet = formatter
        .format(this.toFixed(cBet, 2))
        .replace("$", "");
      this.overalls.sumbet = formatter
        .format(this.toFixed(cSumBet, 2))
        .replace("$", "");
      this.overalls.sumwin = formatter
        .format(this.toFixed(cSumWin, 2))
        .replace("$", "");
      this.overalls.sumggr = formatter
        .format(this.toFixed(cSumGgr, 2))
        .replace("$", "");
      this.overalls.marginudeo =
        this.toFixed((cSumGgr / cSumBet) * 100).replace("$", "") + "%";
    },
    toFixed(value, prec) {
      var precision = prec || 0,
        power = Math.pow(10, precision),
        absValue = Math.abs(Math.round(value * power)),
        result = (value < 0 ? "-" : "") + String(Math.floor(absValue / power));

      if (precision > 0) {
        var fraction = String(absValue % power),
          padding = new Array(
            Math.max(precision - fraction.length, 0) + 1
          ).join("0");
        result += "." + padding + fraction;
      }
      return result;
    },
    mapStakes() {
      this.tickets.sort((a, b) => (a.Opseg > b.Opseg ? 1 : -1));
      if (!this.isDayFiltering()) {
        this.tickets.forEach((ticket) => {
          switch (ticket["Opseg"]) {
            case "custom":
              ticket["Opseg"] =
                "(" + this.ranges.from + ", " + this.ranges.to + "]";
              break;
            case "a":
              ticket["Opseg"] = "(20, 100]";
              break;
            case "b":
              ticket["Opseg"] = "(100, 500]";
              break;
            case "c":
              ticket["Opseg"] = "(500, 1000]";
              break;
            case "d":
              ticket["Opseg"] = "(1000, 2000]";
              break;
            case "e":
              ticket["Opseg"] = "(1000, 2000]";
              break;
            case "f":
              ticket["Opseg"] = "(2000, 5000]";
              break;
            case "g":
              ticket["Opseg"] = "(5000, 10 000]";
              break;
            case "h":
              ticket["Opseg"] = "(10 000, 20 000]";
              break;
            case "i":
              ticket["Opseg"] = "(20 000, 50 000]";
              break;
            case "j":
              ticket["Opseg"] = "(50 000, 100 000]";
              break;
            case "k":
              ticket["Opseg"] = "(100 000, 200 000]";
              break;
            case "l":
              ticket["Opseg"] = "(200 000, 500 000]";
              break;
            case "m":
              ticket["Opseg"] = "(500 000, 15 000 000 000]";
              break;
            case "n":
              ticket["Opseg"] = "(0, 1]";
              break;
            case "o":
              ticket["Opseg"] = "(1, 2]";
              break;
            case "p":
              ticket["Opseg"] = "(2, 3]";
              break;
            case "q":
              ticket["Opseg"] = "(3, 4]";
              break;
            case "r":
              ticket["Opseg"] = "(4, 5]";
              break;
            case "s":
              ticket["Opseg"] = "(5, 6]";
              break;
            case "t":
              ticket["Opseg"] = "(6, 7]";
              break;
            case "u":
              ticket["Opseg"] = "(7, 9]";
              break;
            case "v":
              ticket["Opseg"] = "(9, 12]";
              break;
            case "w":
              ticket["Opseg"] = "(12, 16]";
              break;
            case "x":
              ticket["Opseg"] = "(16, 20]";
              break;
            case "y":
              ticket["Opseg"] = "(20, 40]";
              break;
            default:
              break;
          }
        });
      } else {
        let months = [
          "January",
          "February",
          "March",
          "April",
          "May",
          "June",
          "July",
          "August",
          "September",
          "October",
          "November",
          "December",
        ];
        this.tickets.forEach((tiket) => {
          let datePrep = new Date(tiket["Opseg"]);
          tiket["Opseg"] =
            datePrep.getDate() + ". " + months[datePrep.getMonth()];
        });
      }
    },
    isDayFiltering() {
      return (
        this.tickets.filter((x) => x.Opseg.toString().includes("-")).length > 0
      );
    },
  },
  computed: {
    tickets: {
      get() {
        let filtered;
        filtered = this.tiketi;
        return filtered;
      },
      set(value) {
        this.tiketi = value;
      },
    },
    headers() {
      return [
        {
          text: "Stake",
          align: "start",
          value: "Opseg",
        },
        {
          text: "#Bet",
          value: "Bet",
        },
        {
          text: "ΣBet",
          value: "SumBet",
        },
        {
          text: "Avg.Bet",
          value: "AvgBet",
        },
        {
          text: "GWA.Odds",
          value: "GwaOdds",
        },
        {
          text: "GWA.Events",
          value: "GwaEvents",
        },
        {
          text: "#Win",
          value: "Win",
        },
        {
          text: "Ctrb.#Bets",
          value: "CtrbBets",
        },
        {
          text: "ΣWin",
          value: "SumWin",
        },
        {
          text: "∑GGR",
          value: "ggr",
        },
        {
          text: "Margin",
          value: "margin",
        },
      ];
    },
  },
  created() {
    axios
      .get("http://localhost:5000")
      .then((response) => {
        this.formatTicket(response);
        this.loadTable = false;
      })
      .catch((e) => {
        console.error(e.message);
      });
  },
};
</script>

<style>
.from .v-input__slot,
.to .v-input__slot {
  width: 50px !important;
}
.to .v-text-field__slot label:first-child {
  padding-left: 41px;
}
.mobile {
  color: #333;
}
.v-toolbar__content {
  background-color: darkseagreen !important;
}
@media screen and (min-width: 768px) {
  table {
    border-top: 1px solid black;
  }
  .mainHeader:nth-child(6),
  .mainHeader:nth-child(9) {
    border-right: 1px solid black;
  }
  .mainHeader:nth-child(2) {
    border-left: 1px solid black;
  }
  .mainHeader:nth-child(3) {
    border-right: 1px solid black;
  }
  table td + td:nth-child(2),
  table td + td:nth-child(4),
  table td + td:nth-child(7),
  table td + td:nth-child(10),
  table td + td:nth-child(7) {
    border-left: 1px solid black;
  }
}
@media screen and (max-width: 768px) {
  .desktop,
  .v-data-table-header tr {
    height: 55px !important;
  }
  .mobile table tr {
    max-width: 100%;
    position: relative;
    display: block;
    height: 250px;
  }

  .mobile table tr:nth-child(odd) {
    border-left: 6px solid rgb(48, 170, 103);
  }

  .mobile table tr:nth-child(even) {
    border-left: 6px solid rgb(174, 179, 179);
  }

  .mobile table tr td {
    display: flex;
    width: 100%;
    /* border-bottom: 1px solid #f5f5f5; */
    height: auto;
    padding: 10px;
  }

  .mobile table tr td ul li:before {
    content: attr(data-label);
    padding-right: 0.5em;
    text-align: left;
    display: block;
    color: #999;
  }
  .v-datatable__actions__select {
    width: 50%;
    margin: 0px;
    justify-content: flex-start;
  }
  .mobile .theme--light tbody tr:hover:not(.v-datatable__expand-row) {
    background: transparent;
  }
}
.flex-content {
  padding: 0;
  margin: 0;
  list-style: none;
  display: flex;
  flex-wrap: wrap;
  width: 100%;
}

.flex-item {
  padding: 5px;
  width: 50%;
  height: 40px;
  font-weight: bold;
}

.home {
  width: 100%;
}

button {
  cursor: pointer;
  border: 1px solid steelblue;
  border-radius: 5px;
  background: white;
  color: steelblue;
  height: 2em;
}

button:hover {
  background: steelblue;
  color: white;
}

.container {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
}

.quote {
  width: 29%;
  padding: 0.5rem;
  margin: 1%;
  border-radius: 10px;
  border: 1px solid steelblue;
  color: black;
}

.quote span.by {
  text-decoration: underline;
}

.quote .added-by {
  color: rgba(0, 0, 0, 0.6);
  margin-top: 3em;
}
</style>
